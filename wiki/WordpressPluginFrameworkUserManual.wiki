#summary Implementation guide for the Wordpress Plugin Framework.
#labels Featured,Phase-Implementation

= Introduction =

The Wordpress Plugin Framework (WPF) is a PHP class that is used to provide a framework for the development of Wordpress plugins. The overall intention of the WPF is to generalize and simplify plugin design while also helping plugins adhere to a common administration and usage standard. This manual will help guide you in the development and implementation of a Wordpress plugin derived from the WPF base class.

= Getting Started =

This section will provide a strategy for the creation of a plugin based from the WPF.

NOTE: Throughout this document I will reference the design and development of a fictional "My Test Plugin" that resides in the "my-test-plugin" folder and is implemented as the "my-test-plugin.php" file. 

== Creating a Plugin Package ==

The first step to developing any Wordpress plugin is to create a plugin package. This package consists of a specially named folder to contain your plugin files and a specially named file that is your main plugin file.

So for our example plugin design we will need to do the following:
  # Create a "my-test-plugin" folder.
  # Create a "my-test-plugin.php" file within the "my-test-plugin" folder.

Don't worry about writing any code at this point. You will need to download and integrate the WPF before you can begin your true plugin development. Don't worry though... integrating the WPF into your plugin package will only take a few minutes.

== Obtaining the Wordpress Plugin Package ==

Now that you have created your basic plugin package you can begin the integration of the WPF into your plugin package. But first, you will need to download the latest release of the WPF from the Wordpress subversion repository.

 [http://wordpress.org/extend/plugins/wordpress-plugin-framework/ Click Here To Download The Latest Release of the Wordpress Plugin Framework]