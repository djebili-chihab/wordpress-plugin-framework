#summary Implementation guide for the Wordpress Plugin Framework.
#labels Featured,Phase-Implementation

= Introduction =

The Wordpress Plugin Framework (WPF) is a PHP class that is used to provide a framework for the development of Wordpress plugins. The overall intention of the WPF is to generalize and simplify plugin design while also helping plugins adhere to a common administration and usage standard. This manual will help guide you in the development and implementation of a Wordpress plugin derived from the WPF base class.

= Getting Started =

This section will provide a strategy for the creation of a plugin based from the WPF.

NOTE: Throughout this document I will reference the design and development of a fictional *My Test Plugin* that resides in the *my-test-plugin* folder and is implemented as the *my-test-plugin.php* file. 

== Creating a Plugin Package ==

The first step to developing any Wordpress plugin is to create a plugin package. This package consists of a specially named folder to contain your plugin files and a specially named file that is your main plugin file.

So for our example plugin design we will need to do the following:
  # Create a *my-test-plugin* folder.
  # Create a *my-test-plugin.php* file within the *my-test-plugin* folder.

Don't worry about writing any code at this point. You will need to download and integrate the WPF before you can begin your true plugin development. Don't worry though... integrating the WPF into your plugin package will only take a few minutes.

NOTE: You may want to integrate your plugin package with the Wordpress subversion repository in order to maintain proper revision control and allow for other Wordpress users to gain access to your plugin. Information on utilizing the Wordpress subversion repository is out of the scope of this document. However, more information on this topic can be found at the [http://wordpress.org/extend/plugins/add/ Add Your Plugin] Wordpress Extend webpage.

== Obtaining the Wordpress Plugin Framework ==

Now that you have created your basic plugin package you can begin integration of the WPF into your plugin package. But first, you will need to download the latest release of the WPF from the Wordpress subversion repository.

 [http://wordpress.org/extend/plugins/wordpress-plugin-framework/ Click Here To Download The Latest Release of the Wordpress Plugin Framework]

== Integrating the Wordpress Plugin Framework ==

Integration of the WPF into your plugin package is a fairly simple and painless process. First you will need to unzip the archive file that you retrieved from the Wordpress subversion repository. Next you will need to copy the *wordpress-plugin-framework.php* and *README.txt* files into your plugin package folder.

So for our example plugin design we will need to do the following:
  # Unzip the archive file to the *wordpress-plugin-framework* folder.
  # Copy the *wordpress-plugin-framework.php* file into the *my-test-plugin* folder.
  # Copy the *README.txt* file into the *my-test-plugin* folder.

See... I told you it would be painless... well, you aren't quite done yet. You will still need to customize a small section of the *wordpress-plugin-framework.php* file for your specific plugin.

== Customizing the Wordpress Plugin Framework ==

The customizations required for your specific plugin provide the WPF with some specific knowledge about your plugin package and naming structures. Knowledge of these structures is required in order for the WPF to operate properly. 

First you will need to customize the name of the WPF class for your plugin package. This is required due to the lack of namespace support in PHP 4/5. Then you will need to customize the section of plugin-specific class variables so that the WPF will be able to find and work with your plugin package.

This step is extremely important so to make sure that you get it right I will walk you through a demonstration of customizing for the *My Test Plugin* package.

So for our example plugin design we will need to do the following:
  # Modify the *class DemoPlugin_WordpressPluginFramework* line to be *class MyTestPlugin_WordpressPluginFramework*.
  # Set *$PLUGIN_TITLE* to be *"My Test Plugin"*.
  # Set *$PLUGIN_VERSION* to be *"1.00"* (the appropriate version number).
  # Set *$PLUGIN_SUBFOLDER_NAME* to be *"my-test-plugin"*.
  # Set *$PLUGIN_FILE_NAME* to be *"my-test-plugin"*.
  # Set *$PLUGIN_ADMIN_MENU_TITLE* to be *"My Test Plugin"*.
  # Set *$PLUGIN_ADMIN_MENU_PAGE_TITLE* to be *"My Test Plugin Options Page"*.
  # Set *$PLUGIN_TITLE* to be *"My Test Plugin"*.
  # Set *$PLUGIN_ADMIN_MENU_PAGE_SLUG* to be *"my-test-plugin-options"*.

You have now successfully customized the *wordpress-plugin-framework.php* file for your plugin. From this point forward, you will not need to modify this file unless you perform one of the following tasks.

  * _Release a new version of your plugin_ - You will need to modify the *$PLUGIN_VERSION* to reflect the new appropriate plugin version number.
  * _Upgrade your plugin to a new release of the WPF_ - You will need to follow the guidelines specified for the new release of the WPF.

= Implementing the Plugin =

*MORE INFO COMING SOON...*

== Customizing the README File ==

*MORE INFO COMING SOON...*

== Creating the Plugin Header ==

*MORE INFO COMING SOON...*

== Creating the Plugin Class ==

*MORE INFO COMING SOON...*